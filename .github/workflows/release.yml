name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

jobs:
  release:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Get version
      id: version
      shell: pwsh
      run: |
        if ($env:GITHUB_EVENT_NAME -eq "workflow_dispatch") {
          $version = "${{ github.event.inputs.version }}"
        } else {
          $version = "${{ github.ref_name }}" -replace '^v', ''
        }
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        Write-Host "Version: $version"

    - name: Restore
      run: dotnet restore

    - name: Build
      run: dotnet build -c Release --no-restore

    - name: Publish
      shell: pwsh
      run: |
        dotnet publish OtomatikMetinGenisletici.csproj -c Release -r win-x64 --self-contained -p:PublishSingleFile=true -o publish

    - name: Install Inno Setup
      shell: pwsh
      run: |
        # Chocolatey ile Inno Setup kurulumu (daha güvenilir)
        Write-Host "Installing Inno Setup via Chocolatey..."
        choco install innosetup -y --no-progress

        # Kurulum kontrolü
        $isccPath = "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe"
        if (-not (Test-Path $isccPath)) {
          $isccPath = "${env:ProgramFiles}\Inno Setup 6\ISCC.exe"
        }

        if (Test-Path $isccPath) {
          Write-Host "Inno Setup installed successfully at: $isccPath"
        } else {
          Write-Host "Inno Setup installation failed!"
          exit 1
        }

    - name: Create KURULUM.txt
      shell: pwsh
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"

        "# Otomatik Metin Genisletici v$version - Kurulum Kilavuzu" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8
        "" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "## Sistem Gereksinimleri" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "- Windows 10/11 (x64)" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "- .NET SDK kurulumu GEREKMEZ (Self-contained)" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "## Kurulum" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "1. ZIP dosyasini istediginiz klasore cikarin" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "2. OtomatikMetinGenisletici.exe dosyasini calistirin" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "3. Ilk calistirmada Windows Defender uyarisi cikabilir - 'Yine de calistir' secin" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "## Hizli Baslangic" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "1. Kisayol Ekleme: Ana ekranda 'Ekle' butonuna tiklayin" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "2. Kisayol: Yazmak istediginiz kisa metin (orn: 'mrhb')" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "3. Genisletme: Tam metin (orn: 'Merhaba, nasilsiniz?')" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "4. Kaydet ve kullanmaya baslayin!" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "## Temel Ozellikler" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "- Hizli metin genisletme (Ctrl+Space ile tetikleme)" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "- Akilli metin onerileri ve ogrenme algoritmasi" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "- Pencere filtreleme sistemi" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "- System tray entegrasyonu" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "- Modern kullanici arayuzu" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "## Iletisim & Destek" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "- E-posta: iletisim@saffetcelik.com.tr" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "- Instagram: instagram.com/kamucoder" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "- GitHub: github.com/saffetcelik" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "## Lisans" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "© 2024 Saffet Celik - Tum haklari saklidir" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "---" | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append
        "Not: Bu uygulama .NET 8 ile gelistirilmis olup herhangi bir ek kurulum gerektirmez." | Out-File -FilePath "publish/KURULUM.txt" -Encoding UTF8 -Append

        Write-Host "KURULUM.txt created"

    - name: Verify files
      shell: pwsh
      run: |
        Write-Host "Published files:"
        Get-ChildItem -Path publish -Recurse

        $files = @("OtomatikMetinGenisletici.exe", "imlec.png", "KURULUM.txt")
        foreach ($file in $files) {
          if (Test-Path "publish/$file") {
            Write-Host "Found: $file"
          } else {
            Write-Host "Missing: $file"
            exit 1
          }
        }

    - name: Update setup script version
      shell: pwsh
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $content = Get-Content setup.iss -Raw
        $content = $content -replace "AppVersion=[\d\.]+", "AppVersion=$version"
        $content = $content -replace "AppVerName=Otomatik Metin Genişletici v[\d\.]+", "AppVerName=Otomatik Metin Genişletici v$version"
        $content = $content -replace "OutputBaseFilename=MetinGenisletici-Setup-v[\d\.]+", "OutputBaseFilename=MetinGenisletici-Setup-v$version"
        Set-Content setup.iss -Value $content -Encoding UTF8
        Write-Host "Updated setup.iss version to $version"

    - name: Create installer
      shell: pwsh
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $isccPath = "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe"
        if (-not (Test-Path $isccPath)) {
          $isccPath = "${env:ProgramFiles}\Inno Setup 6\ISCC.exe"
        }

        if (Test-Path $isccPath) {
          & "$isccPath" setup.iss
          Write-Host "Installer created successfully"

          $setupFile = "installer\MetinGenisletici-Setup-v$version.exe"
          if (Test-Path $setupFile) {
            echo "SETUP_NAME=MetinGenisletici-Setup-v$version.exe" >> $env:GITHUB_ENV
            Write-Host "Setup file: $setupFile"
          } else {
            Write-Host "Setup file not found!"
            exit 1
          }
        } else {
          Write-Host "Inno Setup compiler not found!"
          exit 1
        }

    - name: Create portable package
      shell: pwsh
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $name = "MetinGenisletici-Portable-v$version.zip"

        New-Item -ItemType Directory -Path release -Force
        Copy-Item publish/OtomatikMetinGenisletici.exe release/
        Copy-Item publish/imlec.png release/
        Copy-Item publish/KURULUM.txt release/

        Compress-Archive -Path release/* -DestinationPath $name

        Write-Host "Created: $name"
        echo "PACKAGE_NAME=$name" >> $env:GITHUB_ENV

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name || format('v{0}', github.event.inputs.version) }}
        name: "Otomatik Metin Genisletici v${{ steps.version.outputs.VERSION }}"
        body: |
          ## 🚀 Otomatik Metin Genisletici v${{ steps.version.outputs.VERSION }}

          ### 📥 İndirme
          - **Setup (Önerilen)**: ${{ env.SETUP_NAME }}
          - **Portable Versiyon**: ${{ env.PACKAGE_NAME }}

          ### 🆕 Bu Sürümdeki Yenilikler (v${{ steps.version.outputs.VERSION }})

          #### 🔧 Genel İyileştirmeler
          - Kod kalitesi ve performans optimizasyonları
          - Hata düzeltmeleri ve stabilite iyileştirmeleri
          - Kullanıcı deneyimi geliştirmeleri

          ### 🎯 Temel Özellikler
          - Akıllı metin genişletme sistemi
          - N-gram tabanlı öğrenme algoritması ile akıllı öneriler
          - Modern WPF kullanıcı arayüzü
          - Özelleştirilebilir tuş kombinasyonları
          - Pencere filtreleme sistemi
          - System tray entegrasyonu
          - %100 yerel çalışma

          ### 📋 Kurulum

          #### Setup Versiyonu (Önerilen)
          1. MetinGenisletici-Setup-v${{ steps.version.outputs.VERSION }}.exe dosyasını indirin
          2. Setup dosyasını çalıştırın ve kurulum sihirbazını takip edin
          3. Program otomatik olarak Program Files'a kurulacak
          4. Start Menu'den veya masaüstü kısayolundan çalıştırın

          #### Portable Versiyon
          1. ZIP dosyasını indirin ve istediğiniz klasöre çıkarın
          2. OtomatikMetinGenisletici.exe dosyasını çalıştırın
          3. Detaylı kurulum için KURULUM.txt dosyasını okuyun

          ### 💻 Sistem Gereksinimleri
          - Windows 10/11 (x64)
          - .NET SDK kurulumu GEREKMEZ (Self-contained)
          - Yönetici yetkileri (global klavye izleme için)

          ### 📞 İletişim & Destek
          - **E-posta**: iletisim@saffetcelik.com.tr
          - **Instagram**: instagram.com/kamucoder
          - **GitHub**: github.com/saffetcelik
        files: |
          installer/${{ env.SETUP_NAME }}
          ${{ env.PACKAGE_NAME }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
